# MASSIMILIANO PATACCHIOLA
# This CMakeList file permits to compile a YARP/opencv c++ source code
# It was generated by "yarp cmake" and modified to include "opencv" libraries
# To use it run: cmake .

#Check the cmake version
cmake_minimum_required(VERSION 2.8.9)

# Start a project.
set(KEYWORD "icub_project_mp")
project(${KEYWORD})

# Find YARP.  Point the YARP_DIR environment variable at your build.
find_package(YARP REQUIRED)
list(APPEND CMAKE_MODULE_PATH ${YARP_MODULE_PATH})

# Find opencv libraries
find_package( OpenCV REQUIRED )

# Find tinyxml libraries
#find_package( TinyXML REQUIRED )

#Target link for iKinGaze 
#target_link_libraries(${PROJECTNAME} icubmod)


# Search for source code.
file(GLOB folder_source *.cpp *.cc *.c)
file(GLOB folder_header *.h)
source_group("Source Files" FILES ${folder_source})
source_group("Header Files" FILES ${folder_header})

# Search for IDL files.
file(GLOB idl_files *.thrift *.msg *.srv)
foreach(idl ${idl_files})
  yarp_idl_to_dir(${idl} ${CMAKE_BINARY_DIR}/idl IDL_SRC IDL_HDR IDL_INCLUDE)
  set(folder_source ${folder_source} ${IDL_SRC})
  set(folder_header ${folder_header} ${IDL_HDR})
  include_directories(${IDL_INCLUDE})
endforeach()

# Automatically add include directories if needed.
foreach(header_file ${folder_header})
  get_filename_component(p ${header_file} PATH)
  include_directories(${p})
endforeach(header_file ${folder_header})

find_package(ICUB) # if you are developing your module externally to the iCub repository, make sure to include the following lines

# Inclue any directories needed for YARP and opencv
include_directories(${YARP_INCLUDE_DIRS})
include_directories( ${OpenCV_INCLUDE_DIRS} )
include_directories(${ICUB_INCLUDE_DIRS}) # if you are developing your module externally to the iCub repository, make sure to include the following lines
#include_directories(${TinyXML_INCLUDE_DIRS})


# Set up our main executable.
if (folder_source)
#  add_executable( detectFace detectFace.cpp ) 
#  add_executable( detectFaceSmile detectFaceSmile.cpp ) 
#  add_executable( facedetect facedetect.cpp )
#  add_executable( findLocation findLocation.cpp)
#  add_executable( yarp_to_opencv yarp_to_opencv.cpp)
#  add_executable( lookAtLocation lookAtLocation.cpp)
#  add_executable( gazeInterface gazeInterface.cpp)
#  add_executable( gazeInterface_original gazeInterface_original.cpp)
#  add_executable(puppet puppet.cpp)
  add_executable(main main.cpp)

#  target_link_libraries( findLocation ${YARP_LIBRARIES})
#  target_link_libraries( facedetect ${OpenCV_LIBS} )
#  target_link_libraries( detectFace ${OpenCV_LIBS} ${YARP_LIBRARIES})
#  target_link_libraries( detectFaceSmile ${OpenCV_LIBS} ${YARP_LIBRARIES})
#  target_link_libraries( yarp_to_opencv ${OpenCV_LIBS} ${YARP_LIBRARIES})
#  target_link_libraries( lookAtLocation ${YARP_LIBRARIES})
#  target_link_libraries( gazeInterface icubmod ${YARP_LIBRARIES})
#  target_link_libraries( gazeInterface_original icubmod ${YARP_LIBRARIES})
#  target_link_libraries(puppet ${YARP_LIBRARIES} ${TinyXML_LIBRARIES})
target_link_libraries( main ${OpenCV_LIBS} ${YARP_LIBRARIES})

else (folder_source)
  message(FATAL_ERROR "No source code files found. Please add something")
endif (folder_source)












